# -*- coding: utf-8 -*-
"""Dedaltonizer

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1rZneWdAN-uQQ6Od04m31pLRdxymH-jIh
"""

# pull decimalized color values
red = 191 # user input
green = 95 # user input
blue = 167 # user input

# colorblindness
c = 2 # user input

# 0 = green/blue, eliminates cyan
# 1 = blue/red, eliminates magenta
# 2 = red/green, eliminates yellow

# normalize
R = red/255
G = green/255
B = blue/255

# hue algorithm
if R >= max(G,B) and R != max(G,B):
  preh = ((G-B)/(R-min(G,B)))
elif G > max(R,B) and G != max(R,B):
  preh = ((B-R)/(G-min(B,R))) + 2
elif B > max(R,G) and B != max(R,G):
  preh = ((R-G)/(B-min(R,G))) + 4
elif R == G:
  preh = 1
elif B == G:
  preh = 3
elif R == B:
  preh = 5
else:
  preh = 0

# max left/right is 60
hue = (60*preh + 360) % 360

# saturation and hue, if desired. not necessary
saturation = 100*(max(R,G,B)-min(R,G,B))/max(R,G,B)
value = 100*max(R,G,B)

# changes hue to readable zone, akin to change of variables
# that is, removing slices of the color wheel and compacting it down.
left = (2/3)*(120*c-hue)
right = (2/3)*(hue+360-120*c)
if left <= right:
  newhue = ((120*c - left) % 360)
else:
  newhue = ((120*c + right) % 360)

print(hue)
print(newhue)

# now, reconvert to RGB
if 0 < newhue <= 60:
  preblue = min(R,G,B)
  prered = max(R,G,B)
  pregreen = min(R,G,B)+(max(R,G,B)-min(R,G,B))*(1 - newhue/60 % 1)
if 60 < newhue <= 120:
  preblue = min(R,G,B)
  pregreen = max(R,G,B)
  prered = min(R,G,B)+(max(R,G,B)-min(R,G,B))*(1 - newhue/60 % 1)
if 120 < newhue <= 180:
  prered = min(R,G,B)
  pregreen = max(R,G,B)
  preblue = min(R,G,B)+(max(R,G,B)-min(R,G,B))*(1 - newhue/60 % 1)
if 180 < newhue <= 240:
  preblue = max(R,G,B)
  prered = min(R,G,B)
  pregreen = min(R,G,B)+(max(R,G,B)-min(R,G,B))*(1 - newhue/60 % 1)
if 240 < newhue <= 300:
  preblue = max(R,G,B)
  pregreen = min(R,G,B)
  prered = min(R,G,B)+(max(R,G,B)-min(R,G,B))*(1 - newhue/60 % 1)
if 300 < newhue <= 360:
  prered = max(R,G,B)
  pregreen = min(R,G,B)
  preblue = min(R,G,B)+(max(R,G,B)-min(R,G,B))*(1 - newhue/60 % 1)

# converts new colors to whole numbers
newred = round(prered*255)
newgreen = round(pregreen*255)
newblue = round(preblue*255)

# example for output reading
print(newred,newgreen,newblue)
